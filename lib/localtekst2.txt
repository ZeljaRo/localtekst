=== C:/Users/Korisnik/Documents/projekti/localtekst/lib/maindart ===
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';

import 'features/folder_picker/screens/folder_selector_screen.dart';

void main() {
  runApp(const LocalTextApp());
}

class LocalTextApp extends StatefulWidget {
  const LocalTextApp({super.key});

  @override
  State<LocalTextApp> createState() => _LocalTextAppState();
}

class _LocalTextAppState extends State<LocalTextApp> {
  @override
  void initState() {
    super.initState();
    _requestPermissions();
  }

  Future<void> _requestPermissions() async {
    await Permission.storage.request();
    await Permission.manageExternalStorage.request();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'LocalText',
      theme: ThemeData(
        useMaterial3: true,
        colorSchemeSeed: Colors.teal,
      ),
      home: const FolderSelectorScreen(),
    );
  }
}



=== C:/Users/Korisnik/Documents/projekti/localtekst/lib/features/folder_picker/screens/folder_selector_screendart ===
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:file_selector/file_selector.dart';
import 'package:path_provider/path_provider.dart';

class FolderSelectorScreen extends StatefulWidget {
  const FolderSelectorScreen({super.key});

  @override
  State<FolderSelectorScreen> createState() => _FolderSelectorScreenState();
}

class _FolderSelectorScreenState extends State<FolderSelectorScreen> {
  List<XFile> _files = [];

  Future<void> _selectFolderAndListFiles() async {
    final directory = await getDirectoryPath();
    if (directory == null) return;

    final folder = Directory(directory);
    final allFiles = folder.listSync();
    final txtFiles = allFiles
        .where((f) =>
            f is File &&
            f.path.toLowerCase().endsWith('.txt'))
        .map((f) => XFile(f.path))
        .toList();

    setState(() {
      _files = txtFiles;
    });
  }

  Future<void> _copySelectedFiles(List<XFile> selectedFiles) async {
    final targetDir = await getApplicationDocumentsDirectory();
    for (final file in selectedFiles) {
      final fileName = file.name;
      final newPath = '${targetDir.path}/$fileName';
      await File(file.path).copy(newPath);
      debugPrint('[KOPIRANO] ${file.path} -> $newPath');
    }
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Fajlovi kopirani.')),
      );
    }
  }

  final Set<XFile> _selected = {};

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Odaberite mapu'),
        actions: [
          IconButton(
            icon: const Icon(Icons.folder_open),
            onPressed: _selectFolderAndListFiles,
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: _files.length,
              itemBuilder: (context, index) {
                final file = _files[index];
                final selected = _selected.contains(file);
                return CheckboxListTile(
                  title: Text(file.name),
                  value: selected,
                  onChanged: (value) {
                    setState(() {
                      if (value == true) {
                        _selected.add(file);
                      } else {
                        _selected.remove(file);
                      }
                    });
                  },
                );
              },
            ),
          ),
          if (_files.isNotEmpty)
            Padding(
              padding: const EdgeInsets.all(12.0),
              child: Row(
                children: [
                  ElevatedButton(
                    onPressed: () => _copySelectedFiles(_files),
                    child: const Text('Kopiraj sve'),
                  ),
                  const SizedBox(width: 12),
                  ElevatedButton(
                    onPressed: () => _copySelectedFiles(_selected.toList()),
                    child: const Text('Kopiraj oznaÄŤene'),
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }
}



=== C:/Users/Korisnik/Documents/projekti/localtekst/lib/features/internal_file/screens/internal_file_list_screendart ===
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';

import 'song_text_screen.dart';

class InternalFileListScreen extends StatefulWidget {
  const InternalFileListScreen({super.key});

  @override
  State<InternalFileListScreen> createState() =>
      _InternalFileListScreenState();
}

class _InternalFileListScreenState extends State<InternalFileListScreen> {
  List<FileSystemEntity> files = [];

  @override
  void initState() {
    super.initState();
    _loadFiles();
  }

  Future<void> _loadFiles() async {
    final directory = await getApplicationDocumentsDirectory();
    final txtFiles = directory
        .listSync()
        .where((file) =>
            file is File && file.path.toLowerCase().endsWith('.txt'))
        .toList();

    setState(() {
      files = txtFiles;
    });
  }

  void _openFileContent(File file) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => SongTextScreen(filePath: file.path),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Popis internih fajlova'),
      ),
      body: files.isEmpty
          ? const Center(child: Text('Nema internih .txt fajlova.'))
          : ListView.builder(
              itemCount: files.length,
              itemBuilder: (context, index) {
                final file = files[index] as File;
                final fileName = file.path.split(Platform.pathSeparator).last;

                return ListTile(
                  title: Text(fileName),
                  onTap: () => _openFileContent(file),
                );
              },
            ),
    );
  }
}



=== C:/Users/Korisnik/Documents/projekti/localtekst/lib/features/internal_file/screens/song_text_screendart ===
import 'dart:io';
import 'package:flutter/material.dart';

class SongTextScreen extends StatefulWidget {
  final String filePath;

  const SongTextScreen({super.key, required this.filePath});

  @override
  State<SongTextScreen> createState() => _SongTextScreenState();
}

class _SongTextScreenState extends State<SongTextScreen> {
  String _fileContent = '';

  @override
  void initState() {
    super.initState();
    _readFileContent();
  }

  Future<void> _readFileContent() async {
    final file = File(widget.filePath);
    final content = await file.readAsString();
    setState(() {
      _fileContent = content;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Tekst pjesme'),
        actions: const [
          // âš™ď¸Ź Dodaj ovdje nerefreshabilne dugmad po potrebi
        ],
      ),
      body: Column(
        children: [
          // đź” Dugmad ovisna o pjesmi (refreshabilna)
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: const [
                Icon(Icons.arrow_back_ios),
                Icon(Icons.arrow_forward_ios),
              ],
            ),
          ),
          const Divider(),
          // đź“„ SadrĹľaj fajla
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Text(
                _fileContent,
                style: const TextStyle(fontSize: 18),
              ),
            ),
          ),
        ],
      ),
    );
  }
}



